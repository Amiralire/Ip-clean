#!/bin/bash

# Validate IP using regex
function valid_ip() {
    local ip=$1
    local regex="^([0-9]{1,3}\.){3}[0-9]{1,3}$"
    [[ $ip =~ $regex ]] || return 1

    IFS='.' read -r o1 o2 o3 o4 <<< "$ip"
    [[ $o1 -ge 0 && $o1 -le 255 && $o2 -ge 0 && $o2 -le 255 && $o3 -ge 0 && $o3 -le 255 && $o4 -ge 0 && $o4 -le 255 ]]
}

# Generate random IP from 178.250.248.0/22 range
generate_ip() {
    while true; do
        ip="178.250.$((248 + RANDOM % 4)).$((RANDOM % 256))"
        if valid_ip "$ip"; then
            echo "$ip"
            return
        fi
    done
}

# Check IP latency with ping
check_ip() {
    local ip=$1
    local result
    result=$(ping -c 1 -W 1 "$ip" 2>/dev/null | grep 'time=')
    if [[ $result =~ time=([0-9.]+)\ ms ]]; then
        local latency=${BASH_REMATCH[1]}
        if (( $(echo "$latency < 70" | bc -l) )); then
            echo -e "\e[32m[$ip] — Latency: ${latency} ms — Clean & Gaming Ready\e[0m"
            return 0
        fi
    fi
    return 1
}

# Main: Try up to 5000 times to find clean IPs
echo -e "\nSearching for clean gaming IPs in 178.250.248.0/22...\n"

clean_found=0
max_clean=10     # Number of clean IPs to collect
max_attempts=5000

for ((i=1; i<=max_attempts; i++)); do
    ip=$(generate_ip)
    if check_ip "$ip"; then
        ((clean_found++))
    fi
    [[ $clean_found -ge $max_clean ]] && break
done

if [[ $clean_found -eq 0 ]]; then
    echo -e "\n\e[31mNo clean IPs found. Try again later.\e[0m"
else
    echo -e "\n\e[34mDone! $clean_found clean IPs collected.\e[0m"
fi
